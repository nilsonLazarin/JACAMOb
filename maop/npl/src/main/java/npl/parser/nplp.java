/* nplp.java */
/* Generated By:JavaCC: Do not edit this line. nplp.java */
                   // NPL parser

  package npl.parser;

  import npl.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSemantics.*;

  import java.util.*;

  public class nplp implements nplpConstants {
    private String npSource = null;
    private DynamicFactsProvider dfp;
    private static LiteralFactory lFac = NPLLiteral.getFactory();
    private static INPLFactory    nFac = new NPLFactory();

    public static void setLiteralFactory(LiteralFactory l) {
        lFac = l;
    }
    public static void setNPLFactory(INPLFactory l) {
        nFac = l;
    }
    public void setDFP(DynamicFactsProvider dfp) {
        this.dfp = dfp;
    }

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }

    private ArithFunction getArithFunction(Literal l) {
        return FunctionRegister.getFunction(l.getFunctor(), l.getArity());
    }

    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.toString().equals("true"))
            return Literal.LTrue;
        if (u.toString().equals("false"))
            return Literal.LFalse;
        if (u.isAtom()) {
           return new Atom((Literal)u);
        } else {
           return u;
        }
    }

  final public void program(NormativeProgram np, DynamicFactsProvider dfp) throws ParseException, Exception {Token k;
this.dfp  = dfp;
    scope(np, null);
    jj_consume_token(0);
}

  final public void scope(NormativeProgram np, Scope superScope) throws ParseException, Exception {Literal scopeId; Rule ir; INorm n; Scope scope; ISanctionRule sr;
    jj_consume_token(SCOPE);
    scopeId = literal();
scope = new Scope(scopeId, np);
                                if (superScope == null) { // it is root
                                  np.setRoot(scope);
                                } else {
                                  superScope.addScope(scope);
                                  scope.setFather(superScope);
                                }
    jj_consume_token(34);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SCOPE:
      case NORM:
      case SANCTION:
      case FAIL:
      case FULFILLED:
      case UNFULFILLED:
      case INACTIVE:
      case OBLIGATION:
      case PERMISSION:
      case PROHIBITION:
      case ATOM:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NORM:{
        n = norm();
        jj_consume_token(35);
scope.addNorm(n);
        break;
        }
      case FAIL:
      case FULFILLED:
      case UNFULFILLED:
      case INACTIVE:
      case OBLIGATION:
      case PERMISSION:
      case PROHIBITION:
      case ATOM:{
        ir = inference_rule();
        jj_consume_token(35);
scope.addInferenceRule(ir);
        break;
        }
      case SANCTION:{
        sr = sanction_rule();
        jj_consume_token(35);
scope.addSanctionRule(sr);
        break;
        }
      case SCOPE:{
        scope(np,scope);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(36);
}

  final public Rule inference_rule() throws ParseException {Literal h; Object b = Literal.LTrue;
    h = literal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 37:{
      jj_consume_token(37);
      b = log_expr();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return new Rule(h,(LogicalFormula)b);}
    throw new Error("Missing return statement in function");
}

  final public INorm norm() throws ParseException {Literal h; Object b; Token id; INorm n;
    jj_consume_token(NORM);
    id = jj_consume_token(ATOM);
    jj_consume_token(38);
    b = log_expr();
    jj_consume_token(39);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FAIL:{
      h = fail();
      break;
      }
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:{
      h = deontic_operator();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (b.toString().equals("true"))  b = Literal.LTrue;
                         if (b.toString().equals("false")) b = Literal.LFalse;
                         n = nFac.createNorm(id.image,h,(LogicalFormula)b);
    norm_sanctions(n);
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final public ISanctionRule sanction_rule() throws ParseException {Literal h; Object b = null; Literal id; Term t; List args = new ArrayList(); ISanctionRule n;
    jj_consume_token(SANCTION);
    id = literal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 38:{
      jj_consume_token(38);
      b = log_expr();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(39);
    h = literal();
n = nFac.createSanctionRule(id,(LogicalFormula)b,h);
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

/*ISanctionRule sanction_rule() :
{ Literal h; Object b = null; Token id; Term t; List args = new ArrayList(); ISanctionRule n; }
{ <SANCTION> id = <ATOM>
  [ "("
       t = var()       { args.add(t); }
       ( "," t = var() { args.add(t); }
       )*
     ")"
  ]
  [ ":"
    b = log_expr()
  ]
  "->"
  (
    h = deontic_operator() { n = nFac.createSanctionRule(id.image,args,(LogicalFormula)b,h); }
    norm_sanctions(n)
  |
    h = literal()          { n = nFac.createSanctionRule(id.image,args,(LogicalFormula)b,h); }
  )
                           { return n; }
}*/
  final public 
void norm_sanctions(INorm n) throws ParseException {Literal h;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(IF);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FULFILLED:{
        jj_consume_token(FULFILLED);
        jj_consume_token(38);
        h = literal();
n.addFulfilledSanction(h);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 40:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          jj_consume_token(40);
          h = literal();
n.addFulfilledSanction(h);
        }
        break;
        }
      case UNFULFILLED:{
        jj_consume_token(UNFULFILLED);
        jj_consume_token(38);
        h = literal();
n.addUnfulfilledSanction(h);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 40:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(40);
          h = literal();
n.addUnfulfilledSanction(h);
        }
        break;
        }
      case INACTIVE:{
        jj_consume_token(INACTIVE);
        jj_consume_token(38);
        h = literal();
n.addInactiveSanction(h);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 40:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          jj_consume_token(40);
          h = literal();
n.addInactiveSanction(h);
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public Literal fail() throws ParseException {Token k; Term t = null; Literal r;
    k = jj_consume_token(FAIL);
    jj_consume_token(41);
    t = term();
    jj_consume_token(42);
r = ASSyntax.createLiteral(NormativeProgram.FailFunctor, t);
                         r.setSrcInfo(new SourceInfo(npSource, k.beginLine));
                         if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            {if ("" != null) return lFac.createNPLLiteral(r,dfp);}
                         } else {
                            {if ("" != null) return r;}
                         }
    throw new Error("Missing return statement in function");
}

  final public Literal deontic_operator() throws ParseException {Token k; Term a, m, g, d = null; Literal r; Object o;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBLIGATION:{
      k = jj_consume_token(OBLIGATION);
r = ASSyntax.createLiteral(NormativeProgram.OblFunctor);
      break;
      }
    case PERMISSION:{
      k = jj_consume_token(PERMISSION);
r = ASSyntax.createLiteral(NormativeProgram.PerFunctor);
      break;
      }
    case PROHIBITION:{
      k = jj_consume_token(PROHIBITION);
r = ASSyntax.createLiteral(NormativeProgram.ProFunctor);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
r.setSrcInfo(new SourceInfo(npSource, k.beginLine));
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      k = jj_consume_token(ATOM);
r.addTerm(new Atom(k.image));
      break;
      }
    case VAR:{
      k = jj_consume_token(VAR);
r.addTerm(new VarTerm(k.image));
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(40);
    o = log_expr();
    jj_consume_token(40);
r.addTerm( changeToAtom(o) );
    o = log_expr();
    jj_consume_token(40);
r.addTerm( changeToAtom(o) );
    o = log_expr();
r.addTerm( changeToAtom(o) );
    jj_consume_token(42);
if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            {if ("" != null) return lFac.createNPLLiteral(r,dfp);}
                         } else {
                            {if ("" != null) return r;}
                         }
    throw new Error("Missing return statement in function");
}

  final public Literal literal() throws ParseException {Token k; List l = null; Literal r; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      k = jj_consume_token(ATOM);
      break;
      }
    case FAIL:{
      k = jj_consume_token(FAIL);
      break;
      }
    case OBLIGATION:{
      k = jj_consume_token(OBLIGATION);
      break;
      }
    case PERMISSION:{
      k = jj_consume_token(PERMISSION);
      break;
      }
    case PROHIBITION:{
      k = jj_consume_token(PROHIBITION);
      break;
      }
    case FULFILLED:{
      k = jj_consume_token(FULFILLED);
      break;
      }
    case UNFULFILLED:{
      k = jj_consume_token(UNFULFILLED);
      break;
      }
    case INACTIVE:{
      k = jj_consume_token(INACTIVE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
r = ASSyntax.createLiteral(k.image);
                         r.setSrcInfo(new SourceInfo(npSource, k.beginLine));
                         if (k.image.equals("true"))  r = Literal.LTrue;
                         if (k.image.equals("false")) r = Literal.LFalse;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      l = terms();
r.setTerms(l);
      jj_consume_token(42);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      lt = list();
r.setAnnots(lt);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
if (r.getFunctor().indexOf(".") >= 0) {
                            try {
                               {if ("" != null) return new InternalActionLiteral((Structure)r, (Agent)null);}
                            } catch (Exception e) {
                               e.printStackTrace();
                            }
                         } else if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            {if ("" != null) return lFac.createNPLLiteral(r,dfp);}
                         } else {
                            {if ("" != null) return r;}
                         }
    throw new Error("Missing return statement in function");
}

  final public List terms() throws ParseException {ArrayList listTerms = new ArrayList(); Term v;
    v = term();
listTerms.add(v);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(40);
      v = term();
listTerms.add(v);
    }
listTerms.trimToSize();
                         {if ("" != null) return listTerms;}
    throw new Error("Missing return statement in function");
}

  final public Term term() throws ParseException {Object o;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      o = list();
      break;
      }
    case VAR:
    case TK_NOT:
    case NUMBER:
    case STRING:
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:
    case UNNAMEDVAR:
    case 41:
    case 56:
    case 60:{
      o = log_expr();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
}

  final public ListTermImpl list() throws ParseException {ListTermImpl lt = new ListTermImpl(); ListTerm last; Token K; Term f;
    jj_consume_token(43);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case NUMBER:
    case STRING:
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:
    case UNNAMEDVAR:
    case 41:
    case 43:
    case 56:
    case 60:{
      f = term_in_list();
last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(40);
        f = term_in_list();
last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 44:{
        jj_consume_token(44);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          K = jj_consume_token(VAR);
last.setNext(new VarTerm(K.image));
          break;
          }
        case UNNAMEDVAR:{
          K = jj_consume_token(UNNAMEDVAR);
last.setNext(UnnamedVar.create(K.image));
          break;
          }
        case 43:{
          f = list();
last = last.concat((ListTerm)f);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(45);
{if ("" != null) return lt;}
    throw new Error("Missing return statement in function");
}

  final public Term term_in_list() throws ParseException {Object o;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      o = list();
      break;
      }
    case VAR:
    case NUMBER:
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:
    case UNNAMEDVAR:
    case 41:
    case 56:
    case 60:{
      o = arithm_expr();
      break;
      }
    case STRING:{
      o = string();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
}

  final public Object log_expr() throws ParseException {Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      t2 = log_expr();
{if ("" != null) return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object log_expr_trm() throws ParseException {Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 46:{
      jj_consume_token(46);
      t2 = log_expr_trm();
{if ("" != null) return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2);}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object log_expr_factor() throws ParseException {Object t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_NOT:{
      jj_consume_token(TK_NOT);
      t = log_expr_factor();
{if ("" != null) return new LogExpr(LogicalOp.not,(LogicalFormula)t);}
      break;
      }
    case VAR:
    case NUMBER:
    case STRING:
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:
    case UNNAMEDVAR:
    case 41:
    case 56:
    case 60:{
      t = rel_expr();
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Object rel_expr() throws ParseException {Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case NUMBER:
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:
    case UNNAMEDVAR:
    case 41:
    case 56:
    case 60:{
      op1 = arithm_expr();
      break;
      }
    case STRING:{
      op1 = string();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
operator = RelationalOp.lt;
        break;
        }
      case 48:{
        jj_consume_token(48);
operator = RelationalOp.lte;
        break;
        }
      case 49:{
        jj_consume_token(49);
operator = RelationalOp.gt;
        break;
        }
      case 50:{
        jj_consume_token(50);
operator = RelationalOp.gte;
        break;
        }
      case 51:{
        jj_consume_token(51);
operator = RelationalOp.eq;
        break;
        }
      case 52:{
        jj_consume_token(52);
operator = RelationalOp.dif;
        break;
        }
      case 53:{
        jj_consume_token(53);
operator = RelationalOp.unify;
        break;
        }
      case 54:{
        jj_consume_token(54);
operator = RelationalOp.literalBuilder;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case NUMBER:
      case FAIL:
      case FULFILLED:
      case UNFULFILLED:
      case INACTIVE:
      case OBLIGATION:
      case PERMISSION:
      case PROHIBITION:
      case ATOM:
      case UNNAMEDVAR:
      case 41:
      case 56:
      case 60:{
        op2 = arithm_expr();
        break;
        }
      case STRING:{
        op2 = string();
        break;
        }
      case 43:{
        op2 = list();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");}
                                             if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");}
                                             {if ("" != null) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:
    case 56:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
op = ArithmeticOp.plus;
        break;
        }
      case 56:{
        jj_consume_token(56);
op = ArithmeticOp.minus;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr();
if (!(t1 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");}
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");}
                                }
                                {if ("" != null) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_trm() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_INTDIV:
    case TK_INTMOD:
    case 57:
    case 58:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:{
        jj_consume_token(57);
op = ArithmeticOp.times;
        break;
        }
      case 58:{
        jj_consume_token(58);
op = ArithmeticOp.div;
        break;
        }
      case TK_INTDIV:{
        jj_consume_token(TK_INTDIV);
op = ArithmeticOp.intdiv;
        break;
        }
      case TK_INTMOD:{
        jj_consume_token(TK_INTMOD);
op = ArithmeticOp.mod;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if ("" != null) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_factor() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 59:{
      jj_consume_token(59);
op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if ("" != null) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_simple() throws ParseException {Token K; Object t; VarTerm v; Literal l;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      K = jj_consume_token(NUMBER);
NumberTerm ni = ASSyntax.parseNumber(K.image);
                                  ni.setSrcInfo(new SourceInfo(npSource, K.beginLine));
                                  {if ("" != null) return ni;}
      break;
      }
    case 56:{
      jj_consume_token(56);
      t = arithm_expr_simple();
if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");}
                                  }
                                  {if ("" != null) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
      }
    case 41:{
      jj_consume_token(41);
      t = log_expr();
      jj_consume_token(42);
{if ("" != null) return t;}
      break;
      }
    case VAR:
    case UNNAMEDVAR:{
      v = var();
{if ("" != null) return v;}
      break;
      }
    case FAIL:
    case FULFILLED:
    case UNFULFILLED:
    case INACTIVE:
    case OBLIGATION:
    case PERMISSION:
    case PROHIBITION:
    case ATOM:{
      l = literal();
ArithFunction af = getArithFunction(l);
                             if (af == null) {
                                {if ("" != null) return l;}
                             } else {
                                ArithFunctionTerm at = new ArithFunctionTerm(af);
                                at.setSrcInfo(l.getSrcInfo());
                                at.setTerms(l.getTerms());
                                //at.setAgent(curAg);
                                {if ("" != null) return at;}
                             }
      break;
      }
    case 60:{
      t = time();
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public VarTerm var() throws ParseException {Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      K = jj_consume_token(VAR);
v = new VarTerm(K.image); v.setSrcInfo(new SourceInfo(npSource, K.beginLine));
      break;
      }
    case UNNAMEDVAR:{
      K = jj_consume_token(UNNAMEDVAR);
v = UnnamedVar.create(K.image);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      lt = list();
v.setAnnots(lt);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
}

  final public StringTerm string() throws ParseException {Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
s = new StringTermImpl(k.image.substring(1,k.image.length()-1));
                      s.setSrcInfo(new SourceInfo(npSource,k.beginLine));
                      {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  final public Term time() throws ParseException {Token k; long t = -1; String u = null;
    jj_consume_token(60);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      k = jj_consume_token(NUMBER);
t = Long.parseLong(k.image);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      k = jj_consume_token(ATOM);
u = k.image;
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(60);
//if (u == null && t != 0)
                      //   throw new ParseException("no time unit can be used only with 0");
                      if (t == -1 && !u.equals("now") && !u.equals("never"))
                         {if (true) throw new ParseException("only 'now' and 'never' cannot have a number after @");}
                      {if ("" != null) return new TimeTerm(t,u);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public nplpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfef0000,0xfef0000,0x0,0x7080000,0x0,0x100000,0x0,0x0,0x0,0xe00000,0x7000000,0x8000080,0xfe80000,0x0,0x0,0x0,0x1fe85180,0x0,0x10000080,0x0,0x1fe85080,0x1fe85080,0x0,0x0,0x1fe85180,0x1fe85080,0x0,0x1fe85080,0x0,0x0,0x0,0xc00,0xc00,0x0,0x1fe81080,0x10000080,0x0,0x1000,0x8000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x20,0x0,0x40,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x200,0x800,0x100,0x11000a00,0x100,0x800,0x1000,0x11000a00,0x11000a00,0x1000,0x4000,0x11000200,0x11000200,0x7f8000,0x11000a00,0x7f8000,0x1800000,0x1800000,0x6000000,0x6000000,0x8000000,0x11000200,0x0,0x800,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public nplp(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public nplp(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new nplpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public nplp(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new nplpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new nplpTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public nplp(nplpTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(nplpTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 39; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  }
