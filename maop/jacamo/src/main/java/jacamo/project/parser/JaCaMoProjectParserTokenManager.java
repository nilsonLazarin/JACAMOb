/* JaCaMoProjectParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JaCaMoProjectParserTokenManager.java */
package jacamo.project.parser;
import java.util.*;
import java.io.*;
import jacamo.project.*;
import jason.mas2j.*;
import jason.asSyntax.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class JaCaMoProjectParserTokenManager implements JaCaMoProjectParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100L) != 0L)
            return 17;
         if ((active0 & 0x7bfffffffffc0L) != 0L)
         {
            jjmatchedKind = 59;
            return 51;
         }
         if ((active0 & 0x200000000000000L) != 0L)
            return 47;
         return -1;
      case 1:
         if ((active0 & 0x7bdfffff7fec0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return 51;
         }
         if ((active0 & 0x20000080100L) != 0L)
            return 51;
         return -1;
      case 2:
         if ((active0 & 0xe00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x5a00000000040L) != 0L)
            return 51;
         if ((active0 & 0x21ffffff7f180L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 51;
         }
         return -1;
      case 3:
         if ((active0 & 0x1400000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xe00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8002012c000L) != 0L)
            return 51;
         if ((active0 & 0x217ffdea53180L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 51;
         }
         return -1;
      case 4:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1400000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xe00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x7e9da201100L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 51;
         }
         if ((active0 & 0x2101604052080L) != 0L)
            return 51;
         return -1;
      case 5:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1400000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xe00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4400000000L) != 0L)
            return 51;
         if ((active0 & 0x7abda001100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 51;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1400000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xe00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8018001000L) != 0L)
            return 51;
         if ((active0 & 0x72bc2000100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 51;
         }
         return -1;
      case 7:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1400000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x628c0000100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 51;
         }
         if ((active0 & 0x10102000000L) != 0L)
            return 51;
         return -1;
      case 8:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400c0000100L) != 0L)
            return 51;
         if ((active0 & 0x22800000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 8;
            }
            return 51;
         }
         return -1;
      case 9:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 51;
         if ((active0 & 0x22800000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 51;
         }
         return -1;
      case 10:
         if ((active0 & 0x2800000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 10;
            return 51;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 51;
         return -1;
      case 11:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 51;
         return -1;
      case 12:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 74);
      case 41:
         return jjStopAtPos(0, 75);
      case 42:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 66);
      case 45:
         return jjStopAtPos(0, 73);
      case 46:
         return jjStartNfaWithStates_0(0, 57, 47);
      case 47:
         return jjStartNfaWithStates_0(0, 72, 17);
      case 58:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 64:
         return jjStopAtPos(0, 69);
      case 91:
         return jjStopAtPos(0, 76);
      case 93:
         return jjStopAtPos(0, 77);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x540400e80L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000020001000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800004000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100200010000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000002000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000080100L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x820000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000040L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000004000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x801000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800a000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2010040000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x14000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40080000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 67);
      case 124:
         return jjStopAtPos(0, 78);
      case 125:
         return jjStopAtPos(0, 70);
      case 126:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100008800040L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002004001000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000e80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002200000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000100L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x12402a007e000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x81901000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x500000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0xe00L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002202000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x208010000L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 51);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x20004000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100080L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000801000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000441000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080000000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x22000008100L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 118:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x840800200L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 51);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000040000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000100001000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40088000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x410000080L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000200000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x20002000100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x11204010000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10008000100L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000001000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x102000000L);
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20010000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000200L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 51);
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x40280200000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x200800L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x141400400L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2010000100L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x40080800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 51);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40080800000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000900L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 51);
         break;
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 51);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000400L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x41400000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800200000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40080000000L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 51);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(7, 22);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 24);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 109:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 51);
         break;
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         break;
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000800000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x2200000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 51);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 51);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800200000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 51);
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(9, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 51);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 35, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(14, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(49, 48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(38, 39); }
                  }
                  break;
               case 17:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(20, 21); }
                  else if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     { jjCheckNAdd(18); }
                  }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(49, 48); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(48); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 47)
                     { jjAddStates(10, 11); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 51)
                     kind = 51;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 4:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 6:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 7:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 10:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 16:
                  if (curChar == 47)
                     { jjAddStates(10, 11); }
                  break;
               case 18:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 22:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 21); }
                  break;
               case 23:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 21); }
                  break;
               case 24:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar == 46)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 46)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 46)
                     { jjCheckNAdd(34); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 46)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if (curChar == 46)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(49, 48); }
                  break;
               case 49:
                  if (curChar == 46)
                     { jjCheckNAdd(48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(49, 48); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(49, 48); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAdd(13); }
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(49, 48); }
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(26); }
                  }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 5:
                  if (curChar == 92)
                     { jjAddStates(22, 24); }
                  break;
               case 6:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 12:
                  if (curChar != 95)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(13); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 18:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
               case 23:
                  { jjCheckNAddTwoStates(23, 21); }
                  break;
               case 25:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(26); }
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(25, 26); }
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(27, 28); }
                  break;
               case 50:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(49, 48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 18:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(23, 21); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\155\141\163", "\141\147\145\156\164", 
"\151\156\163\164\141\156\143\145\163", "\141\147\55\141\162\143\150", "\141\147\55\143\154\141\163\163", 
"\141\147\55\142\142\55\143\154\141\163\163", "\142\145\154\151\145\146\163", "\147\157\141\154\163", "\156\157\144\145", 
"\150\157\163\164", "\146\157\143\165\163", "\152\157\151\156", "\162\157\154\145\163", 
"\151\156", "\165\163\145\163", "\143\154\141\163\163\55\160\141\164\150", 
"\141\163\154\55\160\141\164\150", "\152\141\166\141\55\160\141\164\150", "\157\162\147\55\160\141\164\150", 
"\160\154\141\164\146\157\162\155", "\144\145\142\165\147", "\160\141\143\153\141\147\145", 
"\162\165\156\156\151\156\147", "\142\157\144\171", "\141\160\160\141\162\141\164\165\163", 
"\167\157\162\153\163\160\141\143\145", "\141\162\164\151\146\141\143\164", "\146\157\143\165\163\145\144\55\142\171", 
"\141\147\145\156\164\163", "\157\162\147\141\156\151\163\141\164\151\157\156", "\147\162\157\165\160", 
"\162\145\163\160\157\156\163\151\142\154\145\55\146\157\162", "\163\143\150\145\155\145", "\160\154\141\171\145\162\163", 
"\163\151\164\165\141\164\145\144", "\151\156\163\164\151\164\165\164\151\157\156", 
"\167\157\162\153\163\160\141\143\145\163", "\164\162\165\145", "\146\141\154\163\145", "\156\157\164", "\176", 
"\144\151\166", "\155\157\144", "\142\145\147\151\156", "\145\156\144", null, null, null, null, 
null, "\52", "\56", null, null, null, null, null, null, null, null, "\54", "\173", 
"\72", "\100", "\175", "\72\72", "\57", "\55", "\50", "\51", "\133", "\135", "\174", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   28, 29, 35, 36, 37, 42, 43, 38, 47, 48, 17, 19, 4, 5, 7, 4, 
   5, 9, 7, 21, 22, 24, 6, 8, 10, 40, 41, 44, 45, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JaCaMoProjectParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JaCaMoProjectParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[51];
    private final int[] jjstateSet = new int[2 * 51];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
