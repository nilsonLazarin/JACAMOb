/* as2j.java */
/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import java.util.logging.*;
  import java.util.regex.Matcher;
  import java.util.regex.Pattern;

  import jason.*;
  import jason.asSemantics.*;
  import jason.bb.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSyntax.PlanBody.BodyType;
  import jason.asSyntax.Trigger.TEOperator;
  import jason.asSyntax.Trigger.TEType;
  import jason.util.*;

  public class as2j implements as2jConstants {
    private String    asSource = "";
    private Agent     curAg    = null;
    private int       annotationBeginLine = -1;

    private Atom      namespace     = Literal.DefaultNS;
    private Atom      thisnamespace = Literal.DefaultNS;

    private DirectiveProcessor directiveProcessor = new DirectiveProcessor();
    private NameSpace nsDirective = (NameSpace)directiveProcessor.getInstance("namespace");

    private static Logger logger = Logger.getLogger("aslparser");
    private static Set<String> parsedFiles = new HashSet<String>();
    private static Config config = Config.get(false);
    private static Pattern patternUnnamedWithId = Pattern.compile("_(\\d+)(.*)");

    public void setAg(Agent ag) { curAg = ag; }
    public void setNS(Atom  ns) { namespace = ns; thisnamespace = ns; }
    public Atom getNS()         { return namespace; }

    public void setASLSource(String src) { asSource = src; }

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }

        private InternalActionLiteral checkInternalActionsInContext(LogicalFormula f, Agent ag) throws Exception {
            if (f != null) {
                if (f instanceof InternalActionLiteral) {
                    InternalActionLiteral ial = (InternalActionLiteral)f;
                    if (! ial.getIA(ag).canBeUsedInContext())
                       return ial;
                } else if (f instanceof LogExpr) {
                    LogExpr le = (LogExpr)f;
                    InternalActionLiteral ial = checkInternalActionsInContext(le.getLHS(), ag);
                    if (ial != null)
                        return ial;
                    if (!le.isUnary())
                        return checkInternalActionsInContext(le.getRHS(), ag);
                }
        }
        return null;
    }

    private ArithFunction getArithFunction(Literal l) {
        ArithFunction af = null;
        if (curAg != null)
           // try to find the function in agent register
           af = curAg.getFunction(l.getFunctor(), l.getArity());
        if (af == null)
           // try global function
           af = FunctionRegister.getFunction(l.getFunctor(), l.getArity());
        return af;
    }

    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.isAtom()) {
           if (((Atom)u).getFunctor().equals("default"))
              return Literal.DefaultNS;
           else if (((Atom)u).getFunctor().equals("this_ns"))
              return thisnamespace;
           else
              return new Atom((Literal)u);
        }
        return u;
    }

/* AgentSpeak Grammar */
  final public 
boolean agent(Agent a) throws ParseException, jason.JasonException {curAg = a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case TK_LABEL_AT:
      case TK_NS_SEP:
      case ATOM:
      case UNNAMEDVARID:
      case UNNAMEDVAR:
      case 38:
      case 43:
      case 45:
      case 46:
      case 47:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      agent_component(a);
    }
    jj_consume_token(0);
if (a != null) parsedFiles.add(a.getASLSrc());
                                    {if ("" != null) return true;}
    throw new Error("Missing return statement in function");
}

  final public void agent_component(Agent a) throws ParseException, jason.JasonException {Literal b;
  Literal g;
  Plan    p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 38:{
      directive(a);
      break;
      }
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:{
      b = belief();
if (a != null) a.addInitialBel(b);
      break;
      }
    case 43:{
      g = initial_goal();
if (a != null) a.addInitialGoal(g);
      break;
      }
    case TK_LABEL_AT:
    case 45:
    case 46:
    case 47:{
      p = plan();
if (a != null) {
                                p.setSourceFile(asSource);
                                a.getPL().add(p);
                                // warning only not parsed files
                                if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                  List<VarTerm> singletonVars = p.getSingletonVars();
                                  if (singletonVars.size() > 0) {
                                    logger.warning(getSourceRef(p.getSrcInfo())+" warning: the plan for event '"+p.getTrigger()+"' has the following singleton variables: "+singletonVars);
                                  }
                                }
                              }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* Directive */
  final public boolean directive(Agent outerAg) throws ParseException, jason.JasonException {Pred dir = null;
  Agent resultOfDirective = null;
  Agent bakAg = curAg;
  Atom oldNS = null;
    jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_BEGIN:{
      jj_consume_token(TK_BEGIN);
      dir = directive_arguments();
      jj_consume_token(39);
Agent innerAg = new Agent(); innerAg.initAg();
                                      dir = new Pred(namespace, dir);
                                      Directive d = directiveProcessor.getInstance(dir);
                                      d.begin(dir,this);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        agent_component(innerAg);
      }
      jj_consume_token(38);
      jj_consume_token(TK_END);
      jj_consume_token(39);
resultOfDirective = d.process(dir, outerAg, innerAg);
                                      d.end(dir,this);
      break;
      }
    case ATOM:{
      dir = directive_arguments();
      jj_consume_token(39);
dir = new Pred(namespace, dir);
                                      Directive d = directiveProcessor.getInstance(dir);
                                      d.begin(dir, this); // to declare the namespace as local
                                      resultOfDirective = d.process(dir, outerAg, null);
                                      d.end(dir, this);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (resultOfDirective != null && outerAg != null) {
                                        // import bels, plans and initial goals from agent resultOfDirective
                                        outerAg.importComponents(resultOfDirective);
                                      }
                                      curAg = bakAg;
                                      {if ("" != null) return false;}
    throw new Error("Missing return statement in function");
}

  final public Pred directive_arguments() throws ParseException {Token K; Pred p; List l; ListTerm lt;
  Atom ons = namespace; namespace = Literal.DefaultNS; // do not replace abstract namespace for terms

    K = jj_consume_token(ATOM);
p = new Pred(K.image);
                            p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 40:{
      jj_consume_token(40);
      l = terms();
      jj_consume_token(41);
p.setTerms(l);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 54:{
      lt = list();
p.setAnnots(lt);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
namespace = ons;
                            {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

/* Beliefs & Rules */
  final public Literal belief() throws ParseException {Literal h; Object t;
    h = literal();
if (h.isVar()) {
                                  {if (true) throw new ParseException(getSourceRef(h)+" variables cannot be beliefs!");}
                               }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_RULE_SEP:{
      jj_consume_token(TK_RULE_SEP);
      t = log_expr();
h = new Rule(h,(LogicalFormula)t);
                               // warning only not parsed files
                               if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                  List<VarTerm> singletonVars = h.getSingletonVars();
                                  if (singletonVars.size() > 0) {
                                     logger.warning(getSourceRef(h)+" warning: the rule with head '"+((Rule)h).headClone()+"' has the following singleton variables: "+singletonVars);
                                  }
                               }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(42);
{if ("" != null) return h;}
    throw new Error("Missing return statement in function");
}

/* Initial goals */
  final public Literal initial_goal() throws ParseException {Literal g;
    jj_consume_token(43);
    g = literal();
    jj_consume_token(42);
if (g.isVar()) {
                                  {if (true) throw new ParseException(getSourceRef(g)+". a variable cannot be a goal!");}
                           }
                           {if ("" != null) return g;}
    throw new Error("Missing return statement in function");
}

/* Plan */
  final public Plan plan() throws ParseException {Token k = null;
  Pred L = null; Literal L2;
  Trigger T;
  Object C = null;
  Object GC = null;
  PlanBody B = null;
  List sps = null; Plan sp;
  int start = -1, end = -1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_LABEL_AT:{
      L2 = plan_annotation();
start = annotationBeginLine;
                                L = new Pred(L2);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    T = trigger();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      k = jj_consume_token(44);
      C = log_expr();
if (start == -1) start = k.beginLine;
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_GOAL_CONDITION:{
      k = jj_consume_token(TK_GOAL_CONDITION);
      GC = log_expr();
if (start == -1) start = k.beginLine;
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_LEFT_ARROW:{
      k = jj_consume_token(TK_LEFT_ARROW);
      B = plan_body();
if (start == -1) start = k.beginLine;
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    k = jj_consume_token(42);
if (start == -1) start = k.beginLine;
    if (jj_2_2(4)) {
      jj_consume_token(38);
sps = new ArrayList();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_LABEL_AT:
        case 45:
        case 46:
        case 47:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        sp = plan();
sps.add(sp);
      }
      jj_consume_token(39);
    } else {
      ;
    }
if (k != null) end = k.beginLine;
                      InternalActionLiteral ial = null;
                      try { ial = checkInternalActionsInContext((LogicalFormula)C, curAg); } catch (Exception e) {}
                      if (ial != null)
                        {if (true) throw new ParseException(getSourceRef(ial)+" The internal action '"+ial+"' can not be used in plan's context!");}
                      if (B != null && B.getBodyTerm().equals(Literal.LTrue))
                        B = (PlanBody)B.getBodyNext();
                      Plan p = new Plan(L,T,(LogicalFormula)C, B);
                      p.setSrcInfo(new SourceInfo(asSource,start,end));

                                          // NEW ER syntax
                      p.setGoalCondition((LogicalFormula)GC);
                      if (sps != null)
                        for (Object o: sps)
                                try {
                                    p.addSubPlan((Plan)o);
                                } catch (Exception e) {
                                        e.printStackTrace();
                                }

                      {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

  final public Literal plan_annotation() throws ParseException {Token k; Literal L; Token at = null; ListTerm annots = null;
    k = jj_consume_token(TK_LABEL_AT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_BEGIN:
    case TK_END:
    case ATOM:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATOM:{
        at = jj_consume_token(ATOM);
        break;
        }
      case TK_BEGIN:{
        at = jj_consume_token(TK_BEGIN);
        break;
        }
      case TK_END:{
        at = jj_consume_token(TK_END);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        annots = list();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      }
    case 54:{
      annots = list();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(at == null) {
                                  if (curAg != null) {
                                    L = curAg.getPL().getUniqueLabel();
                                  } else {
                                    L = new Pred("undefined");
                                  }
                                } else {
                                  L = new Pred(namespace, at.image);
                                  L.setSrcInfo(new SourceInfo(asSource, at.beginLine));
                                }
                                if (annots != null) {
                                  L.addAnnots( annots.getAsList() );
                                }
                                annotationBeginLine = k.beginLine;
                                {if ("" != null) return L;}
    throw new Error("Missing return statement in function");
}

/* Trigger */
  final public Trigger trigger() throws ParseException {TEOperator teOp;
                                TEType     teType = TEType.belief;
                                        Literal F;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
teOp = TEOperator.add;
      break;
      }
    case 46:{
      jj_consume_token(46);
teOp = TEOperator.del;
      break;
      }
    case 47:{
      jj_consume_token(47);
teOp = TEOperator.goalState;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:
    case 48:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
teType = TEType.achieve;
        break;
        }
      case 48:{
        jj_consume_token(48);
teType = TEType.test;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    F = literal();
{if ("" != null) return new Trigger(teOp,teType,F.forceFullLiteralImpl());}
    throw new Error("Missing return statement in function");
}

/* Plan body */
  final public PlanBody plan_body() throws ParseException {PlanBody F; PlanBody R = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 43:
    case 45:
    case 46:
    case 48:
    case 50:
    case 54:{
      F = plan_body_term();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NOT:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case TK_IF:
        case TK_FOR:
        case TK_WHILE:
        case TK_NS_SEP:
        case NUMBER:
        case STRING:
        case ATOM:
        case UNNAMEDVARID:
        case UNNAMEDVAR:
        case 38:
        case 40:
        case 43:
        case 45:
        case 46:
        case 48:
        case 50:
        case 54:{
          R = plan_body();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
      }
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:{
      F = statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NOT:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case TK_IF:
      case TK_FOR:
      case TK_WHILE:
      case TK_NS_SEP:
      case NUMBER:
      case STRING:
      case ATOM:
      case UNNAMEDVARID:
      case UNNAMEDVAR:
      case 38:
      case 40:
      case 43:
      case 45:
      case 46:
      case 48:
      case 50:
      case 54:{
        R = plan_body();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (R != null) {
              F.setBodyNext( R );
            }
            {if ("" != null) return F;}
    throw new Error("Missing return statement in function");
}

  final public PlanBody plan_body_term() throws ParseException {PlanBody F; PlanBody R = null;
    F = plan_body_factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_POR:{
      jj_consume_token(TK_POR);
      R = plan_body_term();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
if (R == null)
                                  {if ("" != null) return (PlanBody)F;}
                               try {
                                  Structure s = ASSyntax.createStructure(".fork", jason.stdlib.fork.aOr, (Term)F);
                                  if (R.toString().startsWith(".fork(or,")) {
                                     // if R is another fork or, put they args into this fork
                                     InternalActionLiteral ial = (InternalActionLiteral)R.getBodyTerm();
                                     if (ial.getIA(curAg) instanceof jason.stdlib.fork) {
                                        for (int i=1; i<ial.getArity(); i++) {
                                           s.addTerm(ial.getTerm(i));
                                        }
                                     }
                                  } else {
                                     s.addTerm(R);
                                  }

                                  Literal stmtLiteral = new InternalActionLiteral(s, curAg);
                                  stmtLiteral.setSrcInfo( ((Term)F).getSrcInfo() );
                                  {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                               } catch (Exception e) {
                                  e.printStackTrace();
                               }
    throw new Error("Missing return statement in function");
}

  final public PlanBody plan_body_factor() throws ParseException {Object F; PlanBody R = null;
    F = body_formula();
if (!(F instanceof PlanBody)) {if (true) throw new ParseException(getSourceRef(F)+" "+F+" is not a body literal!");}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_PAND:{
      jj_consume_token(TK_PAND);
      R = plan_body_factor();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
if (R == null)
                            {if ("" != null) return (PlanBody)F;}
                          try {
                            Structure s = ASSyntax.createStructure(".fork", jason.stdlib.fork.aAnd, (Term)F);
                            if (R.toString().startsWith(".fork(and,")) {
                              // if R is another fork and, put they args into this fork
                              InternalActionLiteral ial = (InternalActionLiteral)R.getBodyTerm();
                              if (ial.getIA(curAg) instanceof jason.stdlib.fork) {
                                for (int i=1; i<ial.getArity(); i++) {
                                  s.addTerm(ial.getTerm(i));
                                }
                              }
                            } else {
                              s.addTerm(R);
                            }
                            Literal stmtLiteral = new InternalActionLiteral(s, curAg);
                            stmtLiteral.setSrcInfo( ((Term)F).getSrcInfo() );
                            {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                          } catch (Exception e) {
                            e.printStackTrace();
                          }
    throw new Error("Missing return statement in function");
}

  final public PlanBody statement() throws ParseException {PlanBody B;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_IF:{
      B = stmtIF();
      break;
      }
    case TK_FOR:{
      B = stmtFOR();
      break;
      }
    case TK_WHILE:{
      B = stmtWHILE();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return B;}
    throw new Error("Missing return statement in function");
}

  final public PlanBody stmtIF() throws ParseException {PlanBody B;
    jj_consume_token(TK_IF);
    B = stmtIFCommon();
{if ("" != null) return B;}
    throw new Error("Missing return statement in function");
}

  final public PlanBody stmtIFCommon() throws ParseException {Object B; PlanBody pb1 = null; PlanBody pb2 = null; Literal stmtLiteral = null;
    jj_consume_token(40);
    B = log_expr();
    jj_consume_token(41);
    jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 43:
    case 45:
    case 46:
    case 48:
    case 50:
    case 54:{
      pb1 = stmt_body();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(39);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_ELSE:
    case TK_ELIF:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_ELIF:{
        jj_consume_token(TK_ELIF);
        pb2 = stmtIFCommon();
        break;
        }
      case TK_ELSE:{
        jj_consume_token(TK_ELSE);
        jj_consume_token(38);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NOT:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case TK_IF:
        case TK_FOR:
        case TK_WHILE:
        case TK_NS_SEP:
        case NUMBER:
        case STRING:
        case ATOM:
        case UNNAMEDVARID:
        case UNNAMEDVAR:
        case 38:
        case 40:
        case 43:
        case 45:
        case 46:
        case 48:
        case 50:
        case 54:{
          pb2 = stmt_body();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(39);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
try {
                            if (pb1 == null) {
                              pb1 = new PlanBodyImpl();
                            }
                            if (pb2 == null) {
                              stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".if_then_else", (Term)B, pb1), curAg);
                            } else {
                              stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".if_then_else", (Term)B, pb1, pb2), curAg);
                            }
                            stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                          } catch (Exception e) {
                            e.printStackTrace();
                          }
    throw new Error("Missing return statement in function");
}

  final public PlanBody stmtFOR() throws ParseException {Object B; PlanBody pb = null; Literal stmtLiteral;
    jj_consume_token(TK_FOR);
    jj_consume_token(40);
    B = log_expr();
    jj_consume_token(41);
    jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 43:
    case 45:
    case 46:
    case 48:
    case 50:
    case 54:{
      pb = stmt_body();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(39);
try {
                            if (pb == null) {
                              pb = new PlanBodyImpl();
                            }
                            stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".foreach", (Term)B, pb), curAg);
                            stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                          } catch (Exception e) {
                            e.printStackTrace();
                          }
    throw new Error("Missing return statement in function");
}

  final public PlanBody stmtWHILE() throws ParseException {Object B; PlanBody pb = null; Literal stmtLiteral;
    jj_consume_token(TK_WHILE);
    jj_consume_token(40);
    B = log_expr();
    jj_consume_token(41);
    jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 43:
    case 45:
    case 46:
    case 48:
    case 50:
    case 54:{
      pb = stmt_body();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(39);
try {
                            if (pb == null) {
                              pb = new PlanBodyImpl();
                            }
                            stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".loop", (Term)B, pb), curAg);
                            stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                          } catch (Exception e) {
                            e.printStackTrace();
                          }
    throw new Error("Missing return statement in function");
}

  final public PlanBody stmt_body() throws ParseException {PlanBody B = null;
    B = plan_body();
{if ("" != null) return B;}
    throw new Error("Missing return statement in function");
}

  final public Object body_formula() throws ParseException {BodyType formType = BodyType.action;  Object B;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:
    case 50:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
formType = BodyType.achieve;
        break;
        }
      case 50:{
        jj_consume_token(50);
formType = BodyType.achieveNF;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      B = literal();
      break;
      }
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 45:
    case 46:
    case 48:
    case 54:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:
      case 46:
      case 48:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 48:{
          jj_consume_token(48);
formType = BodyType.test;
          break;
          }
        case 45:{
          jj_consume_token(45);
formType = BodyType.addBel;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 45:
          case 51:
          case 52:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 45:{
              jj_consume_token(45);
formType = BodyType.addBelNewFocus;
              break;
              }
            case 51:{
              jj_consume_token(51);
formType = BodyType.addBel;
              break;
              }
            case 52:{
              jj_consume_token(52);
formType = BodyType.addBelEnd;
              break;
              }
            default:
              jj_la1[32] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          break;
          }
        case 46:{
          jj_consume_token(46);
formType = BodyType.delBel;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 45:
          case 46:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 45:{
              jj_consume_token(45);
formType = BodyType.delAddBel;
              break;
              }
            case 46:{
              jj_consume_token(46);
formType = BodyType.delBelNewFocus;
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      if (jj_2_3(2147483647)) {
        B = log_expr();
      } else if (jj_2_4(2147483647)) {
        jj_consume_token(40);
        B = plan_body();
        jj_consume_token(41);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (formType == BodyType.action && B instanceof RelExpr) {
                            {if ("" != null) return new PlanBodyImpl(BodyType.constraint, (RelExpr)B);} // constraint
                          }
                          if (B instanceof Plan) {
                            try {
                              InternalActionLiteral ia = null;
                              String ias = "";
                              if (formType == BodyType.delBel) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".remove_plan", (Term)B), curAg);
                              } else if (formType == BodyType.addBel) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".add_plan", (Term)B, BeliefBase.ASelf, ASSyntax.createAtom("begin")), curAg);
                              } else if (formType == BodyType.addBelEnd) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".add_plan", (Term)B, BeliefBase.ASelf, ASSyntax.createAtom("end")), curAg);
                              } else {
                                {if (true) throw new ParseException(getSourceRef(B)+" Wrong combination of operator "+formType+" and plan.");}
                              }
                              {if ("" != null) return new PlanBodyImpl(BodyType.internalAction, ia);}
                            } catch (Exception e) {
                              e.printStackTrace();
                            }
                          }
                          if (B instanceof InternalActionLiteral && formType != BodyType.action) {
                            {if (true) throw new ParseException(getSourceRef(B)+" Wrong combination of operator "+formType+" and internal action "+B+".");}
                          }
                          if (B instanceof Literal) {
                            if ( ((Literal)B).isInternalAction() )
                              formType = BodyType.internalAction;
                            {if ("" != null) return new PlanBodyImpl(formType, (Literal)B);}
                          } else {
                            if (formType == BodyType.test) {
                              if (B instanceof LogicalFormula)
                                {if ("" != null) return new PlanBodyImpl(BodyType.test, (Term)B);}  // used in ?(a & b)
                              else
                                {if (true) throw new ParseException(getSourceRef(B)+" The argument for ? is not a logical formula.");}
                            } else {
                              {if ("" != null) return B;}
                            }
                          }
    throw new Error("Missing return statement in function");
}

  final public Term rule_plan_term() throws ParseException {Trigger T = null; Object C = null; PlanBody B = null, B1 = null; Plan P = null;
  boolean pb = true; // pb = "only plan body"
  Pred L = null; Token K; ListTerm lt;
  Literal h = null; Object t = null;
  Boolean isRule = false; Token S = null;
    jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_LABEL_AT:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 54:{
      if (jj_2_5(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_LABEL_AT:{
          L = plan_term_annotation();
pb = false;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        T = trigger();
if (T.getType() != TEType.belief) pb = false;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 44:{
          jj_consume_token(44);
          C = log_expr();
pb = false;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_LEFT_ARROW:
        case 49:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 49:{
            jj_consume_token(49);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:
            case TK_TRUE:
            case TK_FALSE:
            case TK_NOT:
            case TK_NEG:
            case TK_BEGIN:
            case TK_END:
            case TK_IF:
            case TK_FOR:
            case TK_WHILE:
            case TK_NS_SEP:
            case NUMBER:
            case STRING:
            case ATOM:
            case UNNAMEDVARID:
            case UNNAMEDVAR:
            case 38:
            case 40:
            case 43:
            case 45:
            case 46:
            case 48:
            case 50:
            case 54:{
              B = plan_body();
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              ;
            }
if (!pb) {if (true) throw new ParseException(getSourceRef(T)+" Wrong place for ';'");}
            break;
            }
          case TK_LEFT_ARROW:{
            jj_consume_token(TK_LEFT_ARROW);
            B = plan_body();
pb = false;
            break;
            }
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NOT:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case TK_IF:
        case TK_FOR:
        case TK_WHILE:
        case TK_NS_SEP:
        case NUMBER:
        case STRING:
        case ATOM:
        case UNNAMEDVARID:
        case UNNAMEDVAR:
        case 38:
        case 40:
        case 43:
        case 45:
        case 46:
        case 48:
        case 50:
        case 54:{
          B = plan_body();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TK_RULE_SEP:{
            S = jj_consume_token(TK_RULE_SEP);
            t = log_expr();
isRule = true;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(39);
if (isRule) {
                                                                      Object li = B.getBodyTerm();
                                                                      if (!(li instanceof Literal) || B.getBodyNext() != null)
                                                                        {if (true) throw new ParseException(getSourceRef(S)+" Wrong place for Rule");}
                                                                      Rule r = new Rule((Literal)li,(LogicalFormula)t);
                                                                      r.setAsTerm(true);
                                                                      {if ("" != null) return r;}
                                                                    }
                                                                    // the plan body case
                                                                    if (T != null) {
                                                                      // handle the case of "+a1", parsed as TE, need to be changed to plan's body
                                                                      // handle the case of "+a1; +a2", parsed as "TE; Body"
                                                                      if (pb && L == null) {
                                                                        if (T.isAddition())
                                                                          B1 = new PlanBodyImpl(BodyType.addBel, T.getLiteral(), true);
                                                                        else
                                                                          B1 = new PlanBodyImpl(BodyType.delBel, T.getLiteral(), true);
                                                                        if (B != null)
                                                                          B1.setBodyNext(B);
                                                                        {if ("" != null) return B1;}
                                                                      }
                                                                      if (C == null && B == null && L == null) {
                                                                        // handle the case of a single trigger
                                                                        T.setAsTriggerTerm(true);
                                                                        {if ("" != null) return T;}
                                                                      } else {
                                                                        // handle the case of a entire plan
                                                                        Plan p = new Plan(L,T,(LogicalFormula)C, B);
                                                                        p.setSrcInfo(T.getSrcInfo());
                                                                        p.setAsPlanTerm(true);
                                                                        {if ("" != null) return p;}
                                                                      }
                                                                    }

                                                                    // the case of a simple plan body term
                                                                    if (B == null)
                                                                      B = new PlanBodyImpl();
                                                                    B.setAsBodyTerm(true);
                                                                    {if ("" != null) return B;}
    throw new Error("Missing return statement in function");
}

  final public Pred plan_term_annotation() throws ParseException {Pred p = null; Token K = null; ListTerm annots = null;
    jj_consume_token(TK_LABEL_AT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_BEGIN:
    case TK_END:
    case ATOM:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATOM:{
        K = jj_consume_token(ATOM);
        break;
        }
      case TK_BEGIN:{
        K = jj_consume_token(TK_BEGIN);
        break;
        }
      case TK_END:{
        K = jj_consume_token(TK_END);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        annots = list();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
      }
    case VAR:
    case UNNAMEDVARID:
    case UNNAMEDVAR:{
      p = var(Literal.DefaultNS);
      break;
      }
    case 54:{
      annots = list();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (p == null) {
                            if (K != null) {
                              p = new Pred(K.image);
                              p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
                            } else {
                              p = new Pred("undefined"); // plan as term should not get an unique ID, it usually is used as var and undefied should be replace by unique ID at run time
                            }
                            if (annots != null) {
                              p.addAnnots(annots.getAsList());
                            }
                          }
                          {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

/* Literal */
  final public Literal literal() throws ParseException {Pred F = null; Pred V; Token k; boolean type = Literal.LPos; Atom NS = namespace;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:{
      if (jj_2_6(2147483647)) {
        NS = namespace();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_NEG:{
        jj_consume_token(TK_NEG);
type = Literal.LNeg;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_BEGIN:
      case TK_END:
      case ATOM:{
        F = pred();
        break;
        }
      case VAR:
      case UNNAMEDVARID:
      case UNNAMEDVAR:{
        V = var(NS);
VarTerm vt = (VarTerm)V;
                                  vt.setNegated(type);
                                  {if ("" != null) return vt;}
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case TK_TRUE:{
      k = jj_consume_token(TK_TRUE);
{if ("" != null) return Literal.LTrue;}
      break;
      }
    case TK_FALSE:{
      k = jj_consume_token(TK_FALSE);
{if ("" != null) return Literal.LFalse;}
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (ASSyntax.isKeyword(F))
                                    NS = Literal.DefaultNS;
                                  NS = nsDirective.map(NS);

                                  if (F.getFunctor().charAt(0) == '\'') {
                                    //F = (Pred)F.newFunctor(F.getFunctor().substring(1, F.getFunctor().length()-1));
                                  } else {
                                    if (F.getFunctor().indexOf(".") >= 0) {
                                      if (F.hasAnnot())
                                        {if (true) throw new ParseException(getSourceRef(F)+" Internal actions cannot have annotations.");}
                                      if (type == Literal.LNeg)
                                        {if (true) throw new ParseException(getSourceRef(F)+" Internal actions cannot be negated.");}
                                      try {
                                        if (F.getFunctor().equals(".include")) // .include needs a namespace (see its code)
                                          {if ("" != null) return new InternalActionLiteral(NS, F, curAg);}
                                        else
                                          {if ("" != null) return new InternalActionLiteral(F, curAg);}
                                      } catch (Exception e) {
                                        if (getArithFunction(F) == null) // it is not a registered function
                                          logger.warning(getSourceRef(F)+" warning: The internal action class for '"+F+"' was not loaded! Error: "+e);
                                      }
                                    }
                                  }

                                  {if ("" != null) return new LiteralImpl(NS, type, F);}
    throw new Error("Missing return statement in function");
}

  final public Atom namespace() throws ParseException {Atom NS = namespace; Token tns = null; boolean explicitAbstractNS = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATOM:{
        tns = jj_consume_token(ATOM);
if (tns.image.equals("default"))
                                           NS = Literal.DefaultNS;
                                      else if (tns.image.equals("this_ns"))
                                           NS = thisnamespace;
                                      else
                                           NS = ASSyntax.createAtom(tns.image);
                                      explicitAbstractNS = false;
        break;
        }
      case VAR:
      case UNNAMEDVARID:
      case UNNAMEDVAR:{
        NS = var(Literal.DefaultNS);
if (NS.hasAnnot())
                                        {if (true) throw new ParseException(getSourceRef(NS)+" name space cannot have annotations.");}
                                      explicitAbstractNS = false;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(TK_NS_SEP);
if (explicitAbstractNS)
                                        NS = thisnamespace;
                                      {if ("" != null) return NS;}
    throw new Error("Missing return statement in function");
}

/* Annotated Formulae */
  final public Pred pred() throws ParseException {Token K; Pred p; List l; ListTerm lt; Term b;
                         Atom ons = namespace; namespace = Literal.DefaultNS; // do not replace abstract namespace for terms

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      K = jj_consume_token(ATOM);
      break;
      }
    case TK_BEGIN:{
      K = jj_consume_token(TK_BEGIN);
      break;
      }
    case TK_END:{
      K = jj_consume_token(TK_END);
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
p = new Pred(K.image);
                         p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 40:{
      jj_consume_token(40);
      l = terms();
      jj_consume_token(41);
p.setTerms(l);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 54:{
      lt = list();
p.setAnnots(lt);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
namespace = ons;
                         {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

/* List of terms */
  final public List terms() throws ParseException {ArrayList listTerms = new ArrayList(); Term v; PlanBody o;
    v = term();
listTerms.add(v);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 53:{
        ;
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        break label_4;
      }
      jj_consume_token(53);
      v = term();
listTerms.add(v);
    }
listTerms.trimToSize();
                         {if ("" != null) return listTerms;}
    throw new Error("Missing return statement in function");
}

  final public Term term() throws ParseException {Object o;
    o = log_expr();
{if ("" != null) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
}

  final public ListTermImpl list() throws ParseException {ListTermImpl lt = new ListTermImpl(); ListTerm last = lt; Token K; Term f;
                            Atom ons = namespace; namespace = Literal.DefaultNS; // do not replace abstract namespace for terms

    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 38:
    case 40:
    case 45:
    case 46:
    case 54:{
      f = term_in_list();
last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 53:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_5;
        }
        jj_consume_token(53);
        f = term_in_list();
last = last.append(f);
      }
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        K = jj_consume_token(VAR);
last.setNext(new VarTerm(K.image));
        break;
        }
      case UNNAMEDVAR:{
        K = jj_consume_token(UNNAMEDVAR);
last.setNext(UnnamedVar.create(K.image));
        break;
        }
      case 54:{
        f = list();
last = last.concat((ListTerm)f);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(56);
namespace = ons;
                            {if ("" != null) return lt;}
    throw new Error("Missing return statement in function");
}

// term_in_list is the same as term, but log_expr/plan_body must be enclosed by "("....")" to avoid problem with |
  final public Term term_in_list() throws ParseException {Object o;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 54:{
      o = list();
      break;
      }
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case NUMBER:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 40:
    case 45:
    case 46:{
      o = arithm_expr();
      break;
      }
    case STRING:{
      o = string();
      break;
      }
    case 38:{
      o = rule_plan_term();
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
}

/* logical expression */
  final public Object log_expr() throws ParseException {Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      t2 = log_expr();
{if ("" != null) return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2);}
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object log_expr_trm() throws ParseException {Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:{
      jj_consume_token(57);
      t2 = log_expr_trm();
{if ("" != null) return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2);}
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object log_expr_factor() throws ParseException {Object t; boolean hasNot = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_NOT:{
      jj_consume_token(TK_NOT);
hasNot = true;
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    t = rel_expr();
if(hasNot)
                        {if ("" != null) return new LogExpr(LogicalOp.not,(LogicalFormula)t);}
                      {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/* relational expression
   used in context, body and term

     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm
*/
  final public Object rel_expr() throws ParseException {Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case NUMBER:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:
    case 40:
    case 45:
    case 46:{
      op1 = arithm_expr();
      break;
      }
    case STRING:{
      op1 = string();
      break;
      }
    case 54:{
      op1 = list();
      break;
      }
    case 38:{
      op1 = rule_plan_term();
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 51:
    case 52:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        jj_consume_token(51);
operator = RelationalOp.lt;
        break;
        }
      case 58:{
        jj_consume_token(58);
operator = RelationalOp.lte;
        break;
        }
      case 52:{
        jj_consume_token(52);
operator = RelationalOp.gt;
        break;
        }
      case 59:{
        jj_consume_token(59);
operator = RelationalOp.gte;
        break;
        }
      case 60:{
        jj_consume_token(60);
operator = RelationalOp.eq;
        break;
        }
      case 61:{
        jj_consume_token(61);
operator = RelationalOp.dif;
        break;
        }
      case 62:{
        jj_consume_token(62);
operator = RelationalOp.unify;
        break;
        }
      case 63:{
        jj_consume_token(63);
operator = RelationalOp.literalBuilder;
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case TK_NS_SEP:
      case NUMBER:
      case ATOM:
      case UNNAMEDVARID:
      case UNNAMEDVAR:
      case 40:
      case 45:
      case 46:{
        op2 = arithm_expr();
        break;
        }
      case STRING:{
        op2 = string();
        break;
        }
      case 54:{
        op2 = list();
        break;
        }
      case 38:{
        op2 = rule_plan_term();
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
//if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                             //   throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");
                                             //if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                             //   throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");

                                             // remove namespace (if not defined), args of rel ops are terms (not literals)
                                             if (op1 instanceof Literal) {
                                                Literal l = (Literal)op1;
                                                if (!l.getNS().equals(Literal.DefaultNS) && l.getNS().equals(namespace)) {
                                                        op1 = l.cloneNS(Literal.DefaultNS);
                                                }
                                             }
                                             if (op2 instanceof Literal) {
                                                Literal l = (Literal)op2;
                                                if (!l.getNS().equals(Literal.DefaultNS) && l.getNS().equals(namespace)) {
                                                        op2 = l.cloneNS(Literal.DefaultNS);
                                                }
                                             }
                                             {if ("" != null) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      ;
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
}

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
op = ArithmeticOp.none;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:
      case 46:{
        ;
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        jj_consume_token(45);
op = ArithmeticOp.plus;
        break;
        }
      case 46:{
        jj_consume_token(46);
op = ArithmeticOp.minus;
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
if (!(t1 instanceof NumberTerm)) {
                                      {if (true) throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");}
                                   }
                                   if (!(t2 instanceof NumberTerm)) {
                                      {if (true) throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");}
                                   }
                                   t1 = new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_trm() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
op = ArithmeticOp.none;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_INTDIV:
      case TK_INTMOD:
      case 64:
      case 65:{
        ;
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 64:{
        jj_consume_token(64);
op = ArithmeticOp.times;
        break;
        }
      case 65:{
        jj_consume_token(65);
op = ArithmeticOp.div;
        break;
        }
      case TK_INTDIV:{
        jj_consume_token(TK_INTDIV);
op = ArithmeticOp.intdiv;
        break;
        }
      case TK_INTMOD:{
        jj_consume_token(TK_INTMOD);
op = ArithmeticOp.mod;
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_factor();
if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  t1 = new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_factor() throws ParseException {Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 66:{
      jj_consume_token(66);
op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if ("" != null) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public Object arithm_expr_simple() throws ParseException {Token K; Object t = null; ArithmeticOp op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:
    case 46:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        jj_consume_token(45);
op = ArithmeticOp.plus;
        break;
        }
      case 46:{
        jj_consume_token(46);
op = ArithmeticOp.minus;
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      K = jj_consume_token(NUMBER);
NumberTerm ni = ASSyntax.parseNumber(K.image);
                                    ni.setSrcInfo(new SourceInfo(asSource, K.beginLine));
                                    if (op == ArithmeticOp.none) {
                                      {if ("" != null) return ni;}
                                    }
                                    {if ("" != null) return new ArithExpr(op, ni);}
      break;
      }
    case 40:{
      jj_consume_token(40);
      t = log_expr();
      jj_consume_token(41);
      break;
      }
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_NS_SEP:
    case ATOM:
    case UNNAMEDVARID:
    case UNNAMEDVAR:{
      t = function();
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (op != ArithmeticOp.none) {
                                      if (!(t instanceof NumberTerm)) {
                                        {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '"+op.toString()+"' is not numeric or variable.");}
                                      }
                                      {if ("" != null) return new ArithExpr(op, (NumberTerm)t);}
                                    }
                                    {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term function() throws ParseException {Literal l;
    l = literal();
ArithFunction af = getArithFunction(l);
                            if (af == null) {
                               {if ("" != null) return l;}
                            } else {
                               ArithFunctionTerm at = new ArithFunctionTerm(af);
                               at.setSrcInfo(l.getSrcInfo());
                               at.setTerms(l.getTerms());
                               at.setAgent(curAg);
                               {if ("" != null) return at;}
                            }
    throw new Error("Missing return statement in function");
}

  final public VarTerm var(Atom ns) throws ParseException {Token K; VarTerm v; ListTerm lt = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      K = jj_consume_token(VAR);
v = new VarTerm(ns, K.image); v.setSrcInfo(new SourceInfo(asSource, K.beginLine));
      break;
      }
    case UNNAMEDVARID:{
      K = jj_consume_token(UNNAMEDVARID);
Matcher matcher = patternUnnamedWithId.matcher(K.image);
                        if (matcher.find()) {
                            v = UnnamedVar.create(ns, Integer.parseInt(matcher.group(1)), K.image);
                        } else {
                                v = UnnamedVar.create(ns, K.image);
                        }
      break;
      }
    case UNNAMEDVAR:{
      K = jj_consume_token(UNNAMEDVAR);
v = UnnamedVar.create(ns, K.image);
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 54:{
      lt = list();
v.setAnnots(lt);
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      ;
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
}

  final public StringTerm string() throws ParseException {Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
s = new StringTermImpl(k.image.substring(1,k.image.length()-1).replaceAll("\\\\n", "\n").replaceAll("\\\\\"","\"") );
                      s.setSrcInfo(new SourceInfo(asSource,k.beginLine));
                      {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_rule_plan_term_732_23_171()
 {
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1131_7_160()
 {
    if (jj_3R_function_1147_4_170()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(38)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_plan_371_17_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1130_7_159()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_rule_plan_term_733_19_162()
 {
    if (jj_scan_token(TK_LEFT_ARROW)) return true;
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_rule_plan_term_739_13_153()
 {
    if (jj_scan_token(TK_RULE_SEP)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_plan_364_5_37()
 {
    if (jj_scan_token(TK_LEFT_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_plan_363_5_36()
 {
    if (jj_scan_token(TK_GOAL_CONDITION)) return true;
    return false;
  }

  private boolean jj_3R_plan_362_5_35()
 {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_rule_plan_term_732_17_161()
 {
    if (jj_scan_token(49)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_732_23_171()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_rule_plan_term_731_15_152()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_732_17_161()) {
    jj_scanpos = xsp;
    if (jj_3R_rule_plan_term_733_19_162()) return true;
    }
    return false;
  }

  private boolean jj_3R_rule_plan_term_737_9_135()
 {
    if (jj_3R_plan_body_457_3_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_739_13_153()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1123_5_158()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1120_7_169()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_rule_plan_term_729_15_151()
 {
    if (jj_scan_token(44)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_plan_356_5_34()
 {
    if (jj_3R_plan_annotation_407_3_57()) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1119_5_168()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1119_5_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_simple_1119_5_168()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_simple_1120_7_169()) return true;
    }
    return false;
  }

  private boolean jj_3R_plan_355_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_356_5_34()) jj_scanpos = xsp;
    if (jj_3R_trigger_437_3_13()) return true;
    xsp = jj_scanpos;
    if (jj_3R_plan_362_5_35()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_363_5_36()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_364_5_37()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_simple_1118_3_145()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_simple_1119_5_157()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_simple_1123_5_158()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_simple_1130_7_159()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_simple_1131_7_160()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_rule_plan_term_727_9_12()
 {
    if (jj_3R_plan_term_annotation_790_3_24()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_727_9_12()) jj_scanpos = xsp;
    if (jj_3R_trigger_437_3_13()) return true;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_729_15_151()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_731_15_152()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_rule_plan_term_726_7_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_rule_plan_term_737_9_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_rule_plan_term_725_3_93()
 {
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rule_plan_term_726_7_115()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_factor_1099_4_146()
 {
    if (jj_scan_token(66)) return true;
    if (jj_3R_arithm_expr_factor_1098_4_127()) return true;
    return false;
  }

  private boolean jj_3R_initial_goal_334_3_33()
 {
    if (jj_scan_token(43)) return true;
    if (jj_3R_literal_815_3_29()) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_factor_1098_4_127()
 {
    if (jj_3R_arithm_expr_simple_1118_3_145()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_factor_1099_4_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_belief_316_7_56()
 {
    if (jj_scan_token(TK_RULE_SEP)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1082_6_150()
 {
    if (jj_scan_token(TK_INTMOD)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1081_6_149()
 {
    if (jj_scan_token(TK_INTDIV)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1080_6_148()
 {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1079_6_147()
 {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1079_4_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_trm_1079_6_147()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_trm_1080_6_148()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_trm_1081_6_149()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_trm_1082_6_150()) return true;
    }
    }
    }
    if (jj_3R_arithm_expr_factor_1098_4_127()) return true;
    return false;
  }

  private boolean jj_3R_belief_311_5_32()
 {
    if (jj_3R_literal_815_3_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_belief_316_7_56()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_trm_1078_4_113()
 {
    if (jj_3R_arithm_expr_factor_1098_4_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arithm_expr_trm_1079_4_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_arithm_expr_1063_9_130()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_1062_9_129()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_1062_7_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithm_expr_1062_9_129()) {
    jj_scanpos = xsp;
    if (jj_3R_arithm_expr_1063_9_130()) return true;
    }
    if (jj_3R_arithm_expr_trm_1078_4_113()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_arithm_expr_1061_4_91()
 {
    if (jj_3R_arithm_expr_trm_1078_4_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arithm_expr_1062_7_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_directive_arguments_293_3_72()
 {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_666_11_120()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_plan_body_457_3_11()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_658_17_167()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_663_11_119()
 {
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_body_formula_657_15_166()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_657_15_155()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_657_15_166()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_658_17_167()) return true;
    }
    return false;
  }

  private boolean jj_3R_body_formula_652_17_165()
 {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_651_17_164()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_655_11_138()
 {
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_657_15_155()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_body_formula_650_15_163()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_650_15_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_650_15_163()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_651_17_164()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_652_17_165()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_107_156()
 {
    if (jj_3R_stmt_body_626_3_123()) return true;
    return false;
  }

  private boolean jj_3R_directive_269_9_55()
 {
    if (jj_3R_directive_arguments_293_3_72()) return true;
    return false;
  }

  private boolean jj_3R_body_formula_648_11_137()
 {
    if (jj_scan_token(45)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_650_15_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_rel_expr_1030_12_105()
 {
    if (jj_3R_rule_plan_term_725_3_93()) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1029_12_104()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_agent_component_225_3_8()) return true;
    return false;
  }

  private boolean jj_3R_body_formula_646_11_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_646_11_136()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_648_11_137()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_655_11_138()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_body_formula_646_11_136()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1028_12_103()
 {
    if (jj_3R_string_1183_3_92()) return true;
    return false;
  }

  private boolean jj_3R_directive_256_17_54()
 {
    if (jj_scan_token(TK_BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1027_12_102()
 {
    if (jj_3R_arithm_expr_1061_4_91()) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1024_10_101()
 {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_639_11_117()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1023_10_100()
 {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_body_formula_644_5_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_646_11_118()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_663_11_119()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_666_11_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_rel_expr_1022_10_99()
 {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1021_10_98()
 {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_stmtWHILE_604_43_110()
 {
    if (jj_3R_stmt_body_626_3_123()) return true;
    return false;
  }

  private boolean jj_3R_body_formula_638_9_116()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_91_140()
 {
    if (jj_scan_token(TK_ELSE)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stmtIFCommon_556_107_156()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1020_10_97()
 {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1019_10_96()
 {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1018_10_95()
 {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1017_10_94()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1017_8_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rel_expr_1017_10_94()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1018_10_95()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1019_10_96()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1020_10_97()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1021_10_98()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1022_10_99()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1023_10_100()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1024_10_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_rel_expr_1027_12_102()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1028_12_103()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1029_12_104()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1030_12_105()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_body_formula_636_5_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_638_9_116()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_639_11_117()) return true;
    }
    if (jj_3R_literal_815_3_29()) return true;
    return false;
  }

  private boolean jj_3R_directive_254_3_31()
 {
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_directive_256_17_54()) {
    jj_scanpos = xsp;
    if (jj_3R_directive_269_9_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_rel_expr_1013_9_78()
 {
    if (jj_3R_rule_plan_term_725_3_93()) return true;
    return false;
  }

  private boolean jj_3R_body_formula_635_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_body_formula_636_5_106()) {
    jj_scanpos = xsp;
    if (jj_3R_body_formula_644_5_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_rel_expr_1012_9_77()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1011_9_76()
 {
    if (jj_3R_string_1183_3_92()) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1010_9_75()
 {
    if (jj_3R_arithm_expr_1061_4_91()) return true;
    return false;
  }

  private boolean jj_3R_rel_expr_1010_5_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_rel_expr_1010_9_75()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1011_9_76()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1012_9_77()) {
    jj_scanpos = xsp;
    if (jj_3R_rel_expr_1013_9_78()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_rel_expr_1017_8_79()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_stmt_body_626_3_123()
 {
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_stmtFOR_582_42_109()
 {
    if (jj_3R_stmt_body_626_3_123()) return true;
    return false;
  }

  private boolean jj_3R_agent_component_229_7_18()
 {
    if (jj_3R_plan_355_3_19()) return true;
    return false;
  }

  private boolean jj_3R_agent_component_228_7_17()
 {
    if (jj_3R_initial_goal_334_3_33()) return true;
    return false;
  }

  private boolean jj_3R_agent_component_227_7_16()
 {
    if (jj_3R_belief_311_5_32()) return true;
    return false;
  }

  private boolean jj_3R_agent_component_226_5_15()
 {
    if (jj_3R_directive_254_3_31()) return true;
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_58_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stmtIFCommon_556_58_139()) {
    jj_scanpos = xsp;
    if (jj_3R_stmtIFCommon_556_91_140()) return true;
    }
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_58_139()
 {
    if (jj_scan_token(TK_ELIF)) return true;
    if (jj_3R_stmtIFCommon_556_3_108()) return true;
    return false;
  }

  private boolean jj_3R_agent_component_225_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_agent_component_226_5_15()) {
    jj_scanpos = xsp;
    if (jj_3R_agent_component_227_7_16()) {
    jj_scanpos = xsp;
    if (jj_3R_agent_component_228_7_17()) {
    jj_scanpos = xsp;
    if (jj_3R_agent_component_229_7_18()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_log_expr_factor_988_5_58()
 {
    if (jj_scan_token(TK_NOT)) return true;
    return false;
  }

  private boolean jj_3R_stmtWHILE_604_3_84()
 {
    if (jj_scan_token(TK_WHILE)) return true;
    if (jj_scan_token(40)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stmtWHILE_604_43_110()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_log_expr_factor_987_3_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_log_expr_factor_988_5_58()) jj_scanpos = xsp;
    if (jj_3R_rel_expr_1010_5_59()) return true;
    return false;
  }

  private boolean jj_3R_log_expr_trm_977_4_39()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_log_expr_trm_976_4_20()) return true;
    return false;
  }

  private boolean jj_3R_log_expr_trm_976_4_20()
 {
    if (jj_3R_log_expr_factor_987_3_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_log_expr_trm_977_4_39()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_log_expr_970_7_21()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_log_expr_969_4_10()
 {
    if (jj_3R_log_expr_trm_976_4_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_log_expr_970_7_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_32_121()
 {
    if (jj_3R_stmt_body_626_3_123()) return true;
    return false;
  }

  private boolean jj_3R_stmtFOR_582_4_83()
 {
    if (jj_scan_token(TK_FOR)) return true;
    if (jj_scan_token(40)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stmtFOR_582_42_109()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_term_in_list_960_5_144()
 {
    if (jj_3R_rule_plan_term_725_3_93()) return true;
    return false;
  }

  private boolean jj_3R_term_in_list_959_5_143()
 {
    if (jj_3R_string_1183_3_92()) return true;
    return false;
  }

  private boolean jj_3R_term_in_list_958_5_142()
 {
    if (jj_3R_arithm_expr_1061_4_91()) return true;
    return false;
  }

  private boolean jj_3R_term_in_list_957_5_141()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_term_in_list_957_3_126()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_in_list_957_5_141()) {
    jj_scanpos = xsp;
    if (jj_3R_term_in_list_958_5_142()) {
    jj_scanpos = xsp;
    if (jj_3R_term_in_list_959_5_143()) {
    jj_scanpos = xsp;
    if (jj_3R_term_in_list_960_5_144()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_statement_538_36_65()
 {
    if (jj_3R_stmtWHILE_604_3_84()) return true;
    return false;
  }

  private boolean jj_3R_list_945_12_134()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_list_944_12_133()
 {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  private boolean jj_3R_list_943_12_132()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_list_943_5_112()
 {
    if (jj_scan_token(55)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_list_943_12_132()) {
    jj_scanpos = xsp;
    if (jj_3R_list_944_12_133()) {
    jj_scanpos = xsp;
    if (jj_3R_list_945_12_134()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_list_940_7_131()
 {
    if (jj_scan_token(53)) return true;
    if (jj_3R_term_in_list_957_3_126()) return true;
    return false;
  }

  private boolean jj_3R_list_939_5_111()
 {
    if (jj_3R_term_in_list_957_3_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_list_940_7_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_stmtIFCommon_556_3_108()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_log_expr_969_4_10()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stmtIFCommon_556_32_121()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    xsp = jj_scanpos;
    if (jj_3R_stmtIFCommon_556_58_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_statement_538_20_64()
 {
    if (jj_3R_stmtFOR_582_4_83()) return true;
    return false;
  }

  private boolean jj_3R_list_938_3_67()
 {
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_list_939_5_111()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_list_943_5_112()) jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_term_929_3_174()
 {
    if (jj_3R_log_expr_969_4_10()) return true;
    return false;
  }

  private boolean jj_3R_stmtIF_545_4_82()
 {
    if (jj_scan_token(TK_IF)) return true;
    if (jj_3R_stmtIFCommon_556_3_108()) return true;
    return false;
  }

  private boolean jj_3R_statement_538_5_63()
 {
    if (jj_3R_stmtIF_545_4_82()) return true;
    return false;
  }

  private boolean jj_3R_terms_919_5_175()
 {
    if (jj_scan_token(53)) return true;
    if (jj_3R_term_929_3_174()) return true;
    return false;
  }

  private boolean jj_3R_statement_538_3_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_538_5_63()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_538_20_64()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_538_36_65()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_plan_body_457_82_43()
 {
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_terms_918_3_173()
 {
    if (jj_3R_term_929_3_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_terms_919_5_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_pred_907_5_125()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_pred_903_5_124()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_terms_918_3_173()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_plan_term_annotation_790_117_46()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_plan_body_457_56_23()
 {
    if (jj_3R_statement_538_3_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_457_82_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_body_factor_506_5_81()
 {
    if (jj_scan_token(TK_PAND)) return true;
    if (jj_3R_plan_body_factor_505_3_60()) return true;
    return false;
  }

  private boolean jj_3R_pred_891_3_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_pred_903_5_124()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_pred_907_5_125()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_body_factor_505_3_60()
 {
    if (jj_3R_body_formula_635_3_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_factor_506_5_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_annotation_407_95_74()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_namespace_874_7_53()
 {
    if (jj_3R_var_1164_2_66()) return true;
    return false;
  }

  private boolean jj_3R_plan_term_annotation_790_88_45()
 {
    if (jj_3R_var_1164_2_66()) return true;
    return false;
  }

  private boolean jj_3R_plan_body_457_34_62()
 {
    if (jj_3R_plan_body_457_3_11()) return true;
    return false;
  }

  private boolean jj_3R_namespace_866_5_52()
 {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3R_namespace_866_5_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_namespace_866_5_52()) {
    jj_scanpos = xsp;
    if (jj_3R_namespace_874_7_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_plan_body_457_28_41()
 {
    if (jj_scan_token(49)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_457_34_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_namespace_865_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_namespace_866_5_30()) jj_scanpos = xsp;
    if (jj_scan_token(TK_NS_SEP)) return true;
    return false;
  }

  private boolean jj_3R_plan_annotation_407_75_90()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_plan_term_annotation_790_68_172()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_plan_body_term_472_3_61()
 {
    if (jj_scan_token(TK_POR)) return true;
    if (jj_3R_plan_body_term_470_1_40()) return true;
    return false;
  }

  private boolean jj_3R_plan_body_term_470_1_40()
 {
    if (jj_3R_plan_body_factor_505_3_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_term_472_3_61()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_body_457_5_22()
 {
    if (jj_3R_plan_body_term_470_1_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_457_28_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_body_457_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_body_457_5_22()) {
    jj_scanpos = xsp;
    if (jj_3R_plan_body_457_56_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_literal_828_7_51()
 {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  private boolean jj_3R_literal_827_7_50()
 {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_trigger_443_7_48()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_namespace_865_3_14()) return true;
    return false;
  }

  private boolean jj_3R_trigger_442_7_47()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_literal_822_9_71()
 {
    if (jj_3R_var_1164_2_66()) return true;
    return false;
  }

  private boolean jj_3R_trigger_442_5_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_trigger_442_7_47()) {
    jj_scanpos = xsp;
    if (jj_3R_trigger_443_7_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_literal_821_7_70()
 {
    if (jj_3R_pred_891_3_88()) return true;
    return false;
  }

  private boolean jj_3R_trigger_439_5_27()
 {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_trigger_438_5_26()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_trigger_437_5_25()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_literal_818_7_69()
 {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  private boolean jj_3R_trigger_437_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_trigger_437_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_trigger_438_5_26()) {
    jj_scanpos = xsp;
    if (jj_3R_trigger_439_5_27()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_trigger_442_5_28()) jj_scanpos = xsp;
    if (jj_3R_literal_815_3_29()) return true;
    return false;
  }

  private boolean jj_3R_literal_816_7_68()
 {
    if (jj_3R_namespace_865_3_14()) return true;
    return false;
  }

  private boolean jj_3R_literal_816_5_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_816_7_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_818_7_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_821_7_70()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_822_9_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_literal_815_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_816_5_49()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_827_7_50()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_828_7_51()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_plan_annotation_407_23_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_plan_annotation_407_75_90()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_term_annotation_790_19_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_plan_term_annotation_790_68_172()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_string_1183_3_92()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_var_1175_4_89()
 {
    if (jj_3R_list_938_3_67()) return true;
    return false;
  }

  private boolean jj_3R_plan_annotation_407_3_57()
 {
    if (jj_scan_token(TK_LABEL_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_annotation_407_23_73()) {
    jj_scanpos = xsp;
    if (jj_3R_plan_annotation_407_95_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_plan_term_annotation_790_3_24()
 {
    if (jj_scan_token(TK_LABEL_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_plan_term_annotation_790_19_44()) {
    jj_scanpos = xsp;
    if (jj_3R_plan_term_annotation_790_88_45()) {
    jj_scanpos = xsp;
    if (jj_3R_plan_term_annotation_790_117_46()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_var_1172_4_87()
 {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  private boolean jj_3R_var_1165_4_86()
 {
    if (jj_scan_token(UNNAMEDVARID)) return true;
    return false;
  }

  private boolean jj_3R_var_1164_4_85()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_var_1164_2_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_var_1164_4_85()) {
    jj_scanpos = xsp;
    if (jj_3R_var_1165_4_86()) {
    jj_scanpos = xsp;
    if (jj_3R_var_1172_4_87()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_var_1175_4_89()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plan_371_17_9()
 {
    if (jj_3R_plan_355_3_19()) return true;
    return false;
  }

  private boolean jj_3R_function_1147_4_170()
 {
    if (jj_3R_literal_815_3_29()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[81];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc801cb80,0xc801cb80,0x40004000,0x0,0x0,0x4000000,0x10000,0x0,0x2000000,0x1000000,0x10000,0x4000c000,0x0,0x4000c000,0x0,0x0,0x0,0xf832cf80,0x0,0x0,0xf832cf80,0xf832cf80,0x800000,0x400000,0x320000,0xf832cf80,0xf832cf80,0xc0000,0xc0000,0xf832cf80,0xf832cf80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf800cf80,0x10000,0x0,0xf832cf80,0x1000000,0x1000000,0x4000000,0xf832cf80,0xf833cf80,0x4000c000,0x0,0xc000c080,0x800,0xc000c080,0xc800cb80,0xc0000080,0xc0000080,0x4000c000,0x0,0x0,0x0,0x0,0xf800cb80,0x80,0x0,0xf800cb80,0x0,0x0,0x400,0xf800cb80,0x0,0xf800cb80,0x0,0x0,0x0,0x3000,0x3000,0x0,0x0,0x0,0xd800cb80,0x80000080,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xe841,0xe841,0x0,0x100,0x400000,0x0,0x0,0x1000,0x0,0x0,0xe000,0x0,0x400000,0x400000,0xe000,0x10800,0x10800,0x456941,0x20000,0x20000,0x456941,0x456941,0x0,0x0,0x0,0x456941,0x456941,0x0,0x0,0x456941,0x456941,0x40800,0x182000,0x182000,0x6000,0x6000,0x16000,0x16000,0x456941,0x0,0x1000,0x456941,0x20000,0x20000,0x0,0x456941,0x45e941,0x0,0x400000,0x400001,0x0,0x1,0x1,0x1,0x1,0x0,0x100,0x400000,0x200000,0x200000,0x406141,0x400001,0x800000,0x406141,0x800000,0x2000000,0x0,0x406141,0xfc180000,0x406141,0xfc180000,0x6000,0x6000,0x0,0x0,0x0,0x6000,0x6000,0x101,0x1,0x400000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public as2j(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public as2j(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new as2jTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public as2j(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new as2jTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new as2jTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public as2j(as2jTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(as2jTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 81; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[67];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 81; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 67; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  }
